-- Clock Generation 
-- main system clock input [1]
-- PCclk, Dclk, Iclk output [1]
-- Iclr output [1]

library IEEE;
use IEEE.std_logic_1164.all;
use work.ff.all;

entity clock_generator is
	port (	
		clk	: in std_logic;
		PCclk, Dclk, Iclk 	: out std_logic;
		Iclr	: out std_logic
		);
end clock_generator;

architecture behavioral of clock_generator is

	signal next_s, current_s: std_logic_vector(2 downto 0);

begin 
	-- explicitly generate a register for sequential reasons
	state_register: vDFF generic map (3) port map (clk, next_s, current_s);
	
	process(all) begin 
	
		case current_s is
			when "001" => next_s <= "010";
			when "010" => next_s <= "100";
			when "100" => next_s <= "001";
			when others => next_s <= "001";
		end case;
		
		if falling_edge(clk) then Iclr <= "1";
		else Iclr <= "0"; end if;
		
	end process;
	
	PCclk <= current_s(0) and clk;
	Dclk <= current_s(1) and clk;
	Iclk <= current_s(2) and clk;
	
end behavioral
	